"""
This type stub file was generated by pyright.
"""

from kivy.uix.scrollview import ScrollView

'''
Drop-Down List
==============

.. image:: images/dropdown.gif
    :align: right

.. versionadded:: 1.4.0

A versatile drop-down list that can be used with custom widgets. It allows you
to display a list of widgets under a displayed widget. Unlike other toolkits,
the list of widgets can contain any type of widget: simple buttons,
images etc.

The positioning of the drop-down list is fully automatic: we will always try to
place the dropdown list in a way that the user can select an item in the list.

Basic example
-------------

A button with a dropdown list of 10 possible values. All the buttons within the
dropdown list will trigger the dropdown :meth:`DropDown.select` method. After
being called, the main button text will display the selection of the
dropdown. ::

    from kivy.uix.dropdown import DropDown
    from kivy.uix.button import Button
    from kivy.base import runTouchApp

    # create a dropdown with 10 buttons
    dropdown = DropDown()
    for index in range(10):
        # When adding widgets, we need to specify the height manually
        # (disabling the size_hint_y) so the dropdown can calculate
        # the area it needs.

        btn = Button(text='Value %d' % index, size_hint_y=None, height=44)

        # for each button, attach a callback that will call the select() method
        # on the dropdown. We'll pass the text of the button as the data of the
        # selection.
        btn.bind(on_release=lambda btn: dropdown.select(btn.text))

        # then add the button inside the dropdown
        dropdown.add_widget(btn)

    # create a big main button
    mainbutton = Button(text='Hello', size_hint=(None, None))

    # show the dropdown menu when the main button is released
    # note: all the bind() calls pass the instance of the caller (here, the
    # mainbutton instance) as the first argument of the callback (here,
    # dropdown.open.).
    mainbutton.bind(on_release=dropdown.open)

    # one last thing, listen for the selection in the dropdown list and
    # assign the data to the button text.
    dropdown.bind(on_select=lambda instance, x: setattr(mainbutton, 'text', x))

    runTouchApp(mainbutton)

Extending dropdown in Kv
------------------------

You could create a dropdown directly from your kv::

    #:kivy 1.4.0
    <CustomDropDown>:
        Button:
            text: 'My first Item'
            size_hint_y: None
            height: 44
            on_release: root.select('item1')
        Label:
            text: 'Unselectable item'
            size_hint_y: None
            height: 44
        Button:
            text: 'My second Item'
            size_hint_y: None
            height: 44
            on_release: root.select('item2')

And then, create the associated python class and use it::

    class CustomDropDown(DropDown):
        pass

    dropdown = CustomDropDown()
    mainbutton = Button(text='Hello', size_hint=(None, None))
    mainbutton.bind(on_release=dropdown.open)
    dropdown.bind(on_select=lambda instance, x: setattr(mainbutton, 'text', x))
'''
__all__ = ('DropDown', )
_grid_kv = ...
class DropDownException(Exception):
    '''DropDownException class.
    '''
    ...


class DropDown(ScrollView):
    '''DropDown class. See module documentation for more information.

    :Events:
        `on_select`: data
            Fired when a selection is done. The data of the selection is passed
            in as the first argument and is what you pass in the :meth:`select`
            method as the first argument.
        `on_dismiss`:
            .. versionadded:: 1.8.0

            Fired when the DropDown is dismissed, either on selection or on
            touching outside the widget.
    '''
    auto_width = ...
    max_height = ...
    dismiss_on_select = ...
    auto_dismiss = ...
    min_state_time = ...
    attach_to = ...
    container = ...
    _touch_started_inside = ...
    __events__ = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_key_down(self, instance, key, scancode, codepoint, modifiers): # -> Literal[True] | None:
        ...
    
    def on_container(self, instance, value): # -> None:
        ...
    
    def open(self, widget): # -> None:
        '''Open the dropdown list and attach it to a specific widget.
        Depending on the position of the widget within the window and
        the height of the dropdown, the dropdown might be above or below
        that widget.
        '''
        ...
    
    def dismiss(self, *largs): # -> None:
        '''Remove the dropdown widget from the window and detach it from
        the attached widget.
        '''
        ...
    
    def on_dismiss(self): # -> None:
        ...
    
    def select(self, data): # -> None:
        '''Call this method to trigger the `on_select` event with the `data`
        selection. The `data` can be anything you want.
        '''
        ...
    
    def on_select(self, data): # -> None:
        ...
    
    def add_widget(self, *args, **kwargs): # -> None:
        ...
    
    def remove_widget(self, *args, **kwargs): # -> None:
        ...
    
    def clear_widgets(self, *args, **kwargs): # -> None:
        ...
    
    def on_motion(self, etype, me): # -> Literal[True]:
        ...
    
    def on_touch_down(self, touch): # -> Literal[True]:
        ...
    
    def on_touch_move(self, touch): # -> Literal[True]:
        ...
    
    def on_touch_up(self, touch): # -> Literal[True]:
        ...
    


if __name__ == '__main__':
    def show_dropdown(button, *largs): # -> None:
        ...
    
    def touch_move(instance, touch): # -> None:
        ...
    
    btn = ...
