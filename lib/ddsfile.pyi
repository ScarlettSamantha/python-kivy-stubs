"""
This type stub file was generated by pyright.
"""

'''
DDS File library
================

This library can be used to parse and save DDS
(`DirectDraw Surface <https://en.wikipedia.org/wiki/DirectDraw_Surface>`)
files.

The initial version was written by::

    Alexey Borzenkov (snaury@gmail.com)

All the initial work credits go to him! Thank you :)

This version uses structs instead of ctypes.


DDS Format
----------

::

    [DDS ][SurfaceDesc][Data]

    [SurfaceDesc]:: (everything is uint32)
        Size
        Flags
        Height
        Width
        PitchOrLinearSize
        Depth
        MipmapCount
        Reserved1 * 11
        [PixelFormat]::
            Size
            Flags
            FourCC
            RGBBitCount
            RBitMask
            GBitMask
            BBitMask
            ABitMask
        [Caps]::
            Caps1
            Caps2
            Reserved1 * 2
        Reserverd2

.. warning::

    This is an external library and Kivy does not provide any support for it.
    It might change in the future and we advise you don't rely on it in your
    code.

'''
DDSD_CAPS = ...
DDSD_HEIGHT = ...
DDSD_WIDTH = ...
DDSD_PITCH = ...
DDSD_PIXELFORMAT = ...
DDSD_MIPMAPCOUNT = ...
DDSD_LINEARSIZE = ...
DDSD_DEPTH = ...
DDPF_ALPHAPIXELS = ...
DDPF_FOURCC = ...
DDPF_RGB = ...
DDPF_LUMINANCE = ...
DDSCAPS_COMPLEX = ...
DDSCAPS_TEXTURE = ...
DDSCAPS_MIPMAP = ...
DDSCAPS2_CUBEMAP = ...
DDSCAPS2_CUBEMAP_POSITIVEX = ...
DDSCAPS2_CUBEMAP_NEGATIVEX = ...
DDSCAPS2_CUBEMAP_POSITIVEY = ...
DDSCAPS2_CUBEMAP_NEGATIVEY = ...
DDSCAPS2_CUBEMAP_POSITIVEZ = ...
DDSCAPS2_CUBEMAP_NEGATIVEZ = ...
DDSCAPS2_VOLUME = ...
DDS_DXTN = ...
DDS_DXT1 = ...
DDS_DXT2 = ...
DDS_DXT3 = ...
DDS_DXT4 = ...
DDS_DXT5 = ...
def dxt_to_str(dxt): # -> Literal['s3tc_dxt1', 's3tc_dxt2', 's3tc_dxt3', 's3tc_dxt4', 's3tc_dxt5', 'rgba', 'alpha', 'luminance', 'luminance_alpha'] | None:
    ...

def str_to_dxt(dxt): # -> Literal[827611204, 844388420, 861165636, 877942852, 894720068, 0, 1, 2, 3] | None:
    ...

def align_value(val, b):
    ...

def check_flags(val, fl):
    ...

def dxt_size(w, h, dxt): # -> int:
    ...

class QueryDict(dict):
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    


class DDSException(Exception):
    ...


class DDSFile:
    fields = ...
    def __init__(self, filename=...) -> None:
        ...
    
    def load(self, filename): # -> None:
        ...
    
    def save(self, filename): # -> None:
        ...
    
    def add_image(self, level, bpp, fmt, width, height, data): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    size = ...
    dxt = ...


if __name__ == '__main__':
    ...
